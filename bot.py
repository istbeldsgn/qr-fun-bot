import os
print("DB_HOST:", os.environ.get("DB_HOST"))
print("DB_PORT:", os.environ.get("DB_PORT"))
print("DB_NAME:", os.environ.get("DB_NAME"))
print("DB_USER:", os.environ.get("DB_USER"))
import os
import sys
import telebot
from telebot.types import InputMediaPhoto, InputMediaVideo
from ticket_generator import generate_ticket_video, generate_ticket


from routes import routes_bus, routes_trolleybus


from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message, Update
from flask import Flask, request  # –¥–ª—è –≤–µ–±—Ö—É–∫–∞ (–µ—Å–ª–∏ –¥–∞–ª—å—à–µ –ø–æ–¥–∫–ª—é—á–∞–µ—à—å)

import logging
telebot.logger.setLevel(logging.INFO)

from db_store import _conn
try:
    with _conn() as conn, conn.cursor() as cur:
        cur.execute("select 1;")
    print("‚úÖ DB OK: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
except Exception as e:
    print(f"‚ùå DB FAIL: {e}")
    sys.exit(1)

with _conn() as conn, conn.cursor() as cur:
    cur.execute("select current_user, inet_server_addr();")
    print("DB who/where:", cur.fetchone())
    
from db_store import init_db, ensure_admin, load_allowed_and_guest, add_or_update_user, remove_user
from ticket_generator import generate_ticket  # ‚Üê —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏


def is_allowed(uid: int) -> bool:
    # 1) –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–∞–º—è—Ç–∏
    if uid in allowed_users:
        return True
    # 2) –§–æ–ª–±—ç–∫: —Å–º–æ—Ç—Ä–∏–º –≤ –ë–î –∏ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
    try:
        with _conn() as conn, conn.cursor() as cur:
            cur.execute("select 1 from public.allowed_users where user_id = %s limit 1;", (uid,))
            ok = cur.fetchone() is not None
        if ok:
            allowed_users.add(uid)
        return ok
    except Exception as e:
        print(f"‚ö†Ô∏è DB check failed: {e}", flush=True)
        return False


from collections import defaultdict, deque
from threading import RLock
import time

last_msgs = defaultdict(deque)
MAX_MSGS = 6          # –Ω–µ –±–æ–ª–µ–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π
WINDOW  = 10          # –∑–∞ 10 —Å–µ–∫—É–Ω–¥

def allow_message(uid: int) -> bool:
    now = time.time()
    q = last_msgs[uid]
    while q and now - q[0] > WINDOW:
        q.popleft()
    if len(q) >= MAX_MSGS:
        return False
    q.append(now)
    return True

user_locks = defaultdict(RLock)

def with_user_lock(uid: int, timeout: float = 5.0):
    lock = user_locks[uid]
    class _Ctx:
        def __enter__(self):
            self.acquired = lock.acquire(timeout=timeout)
            return self.acquired
        def __exit__(self, exc_type, exc, tb):
            if self.acquired:
                lock.release()
    return _Ctx()


# --- –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏ ---
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID_RAW = os.environ.get("ADMIN_ID")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")  # –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –¥–∞–ª–µ–µ –¥–ª—è –≤–µ–±—Ö—É–∫–∞

missing = []
if not BOT_TOKEN:
    missing.append("BOT_TOKEN")
if not ADMIN_ID_RAW:
    missing.append("ADMIN_ID")
# –µ—Å–ª–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –¥–µ–ª–∞–µ—à—å –≤–µ–±—Ö—É–∫, —Ç–æ WEBHOOK_URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω:
if not WEBHOOK_URL:
    missing.append("WEBHOOK_URL")

if missing:
    sys.exit(f"‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")

try:
    ADMIN_ID = int(ADMIN_ID_RAW)
except ValueError:
    sys.exit("‚ùå ADMIN_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–∫–∏ –∏–∑ –ë–î ---
init_db()
ensure_admin(ADMIN_ID)  # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ
allowed_users, guest_users = load_allowed_and_guest()
allowed_users.add(ADMIN_ID)  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –¥–µ—Ä–∂–∏–º –∞–¥–º–∏–Ω–∞ –≤ –ø–∞–º—è—Ç–∏

# --- –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ ---
bot = telebot.TeleBot(BOT_TOKEN, threaded=True)

# --- –ü–∞–º—è—Ç—å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞ (–∫–ª—é—á ‚Äî user_id, –∞ –Ω–µ chat_id) ---
user_data = {}



from html import escape

def notify_admin_about_access_request(user):
    user_id = user.id
    username = escape(user.username) if user.username else "–Ω–µ—Ç username"
    first_name = escape(user.first_name) if user.first_name else ""
    last_name = escape(user.last_name) if user.last_name else ""
    full_name = f"{first_name} {last_name}".strip()

    text = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É:\n"
        f"–ò–º—è: {full_name}\n"
        f"Username: @{username}\n"
        f"ID: {user_id}\n"
        f'<a href="tg://user?id={user_id}">–ü—Ä–æ—Ñ–∏–ª—å</a>\n\n'
        "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø?"
    )

    keyboard = InlineKeyboardMarkup(row_width=2)
    allow_button = InlineKeyboardButton(text="‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"allow_{user_id}")
    deny_button = InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"deny_{user_id}")
    keyboard.add(allow_button, deny_button)

    bot.send_message(ADMIN_ID, text, reply_markup=keyboard, parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ù–ï —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã)
@bot.message_handler(func=lambda m: getattr(m.chat, "type", "") == "private" and not is_allowed(m.from_user.id))
def handle_unauthorized(message):
    user = message.from_user
    bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    notify_admin_about_access_request(user)
     
# –ë–ª–æ–∫–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ
@bot.message_handler(func=lambda m: getattr(m.chat, "type", "") != "private")
def block_groups(message: Message):
    bot.reply_to(message, "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–∫—É.")
     
@bot.callback_query_handler(func=lambda call: call.data.startswith(("allow_", "deny_")))
def callback_access_control(call: CallbackQuery):
    user_id = int(call.data.split("_")[1])

    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return

    if call.data.startswith("allow_"):
        if user_id not in allowed_users:
            allowed_users.add(user_id)
        # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ë–î (Supabase)
        try:
            add_or_update_user(user_id, role="guest")  # –∏–ª–∏ "user"
        except Exception:
            pass

        bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚úÖ –î–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [id={user_id}](tg://user?id={user_id}) –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.",
            parse_mode="Markdown"
        )
        try:
            bot.send_message(user_id, "‚úÖ –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É. –ú–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.")
        except Exception:
            pass

    else:  # deny_
        if user_id in allowed_users:
            allowed_users.discard(user_id)
        try:
            remove_user(user_id)
        except Exception:
            pass

        bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω—ë–Ω")
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚ùå –î–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [id={user_id}](tg://user?id={user_id}) –æ—Ç–∫–ª–æ–Ω—ë–Ω.",
            parse_mode="Markdown"
        )
        try:
            bot.send_message(user_id, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤–∞–º –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.")
        except Exception:
            pass


@bot.message_handler(commands=['add_guest'])
def add_guest(message: Message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not message.reply_to_message:
        bot.send_message(message.chat.id, "‚ùó –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /add_guest.")
        return

    fwd = message.reply_to_message.forward_from
    guest_id = fwd.id if fwd else None
    if not guest_id:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–µ —Å–∫—Ä—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return

    allowed_users.add(guest_id)
    guest_users.add(guest_id)
    try:
        add_or_update_user(guest_id, role="guest")
    except Exception:
        pass

    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {guest_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –≥–æ—Å—Ç—å.")




# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
@bot.message_handler(commands=['start'])
def start(message: Message):
    uid = message.from_user.id
    if not is_allowed(uid):
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:\n1. –ê–≤—Ç–æ–±—É—Å\n2. –¢—Ä–æ–ª–ª–µ–π–±—É—Å")
    user_data[uid] = {}


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
@bot.message_handler(func=lambda m: getattr(m, "chat", None)
                                  and getattr(m.chat, "type", "") == "private"
                                  and getattr(m, "text", None)
                                  and not m.text.startswith("/"))
def handle_message(message: Message):
    uid = message.from_user.id
    print(f"üí¨ msg from {uid} allowed={is_allowed(uid)} text={message.text!r}", flush=True)
    
    if not allow_message(uid):
        bot.send_message(message.chat.id, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ üôè")
        return
        
    if not is_allowed(uid):
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    if uid not in user_data:
        user_data[uid] = {}
    data = user_data[uid]

    # 1) –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    if 'transport_type' not in data:
        text = (message.text or "").strip().lower()
        if text in ('1', '–∞–≤—Ç–æ–±—É—Å'):
            data['transport_type'] = 'bus'
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12):")
        elif text in ('2', '—Ç—Ä–æ–ª–ª–µ–π–±—É—Å'):
            data['transport_type'] = 'trolleybus'
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2):")
        else:
            bot.send_message(
                message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:\n"
                "1. –ê–≤—Ç–æ–±—É—Å\n"
                "2. –¢—Ä–æ–ª–ª–µ–π–±—É—Å\n"
                "(–º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–∏—Ñ—Ä—É –∏–ª–∏ —Å–ª–æ–≤–æ)"
            )

    # 2) –ù–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞
    elif 'route_num' not in data:
        data['route_num'] = (message.text or "").strip().lower().replace('a', '–∞')  # –ª–∞—Ç. a ‚Üí –∫–∏—Ä. –∞
        route_num = data['route_num']

        route_base = routes_bus if data['transport_type'] == 'bus' else routes_trolleybus
        if route_num in route_base:
            data['directions'] = route_base[route_num]
            bot.send_message(
                message.chat.id,
                f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n1. {data['directions'][0]}\n2. {data['directions'][1]}"
            )
        else:
            data['route_manual'] = True
            data['route'] = route_num
            bot.send_message(message.chat.id, "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –≥–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä:")

    # 3) –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–∞–π–¥–µ–Ω)
    elif 'route' not in data and not data.get('route_manual', False):
        choice = (message.text or "").strip()
        if choice == '1':
            data['route'] = data['directions'][0]
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä:")
        elif choice == '2':
            data['route'] = data['directions'][1]
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä:")
        else:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2:")

    # 4) –ì–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä ‚Üí –≥–µ–Ω–µ—Ä–∏–º –∫–∞—Ä—Ç–∏–Ω–∫—É+–≤–∏–¥–µ–æ –∏ —à–ª—ë–º –∞–ª—å–±–æ–º–æ–º
    elif 'garage_number' not in data:
        data['garage_number'] = (message.text or "").strip()

        transport_label = '–ê–≤—Ç–æ–±—É—Å' if data['transport_type'] == 'bus' else '–¢—Ä–æ–ª–ª–µ–π–±—É—Å'
        img_path = None
        video_path = None
        ticket_path = None
        try:
            # –ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∏ –≤–∏–¥–µ–æ
            img_path, video_path = generate_ticket_video(
                transport_label,
                data['route_num'],
                data['route'],
                data['garage_number'],
                base_video="anim.mp4",   # —Ñ–∞–π–ª-–æ–±—Ä–∞–∑–µ—Ü –ª–µ–∂–∏—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
                crop_top_px=200
            )

            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º: —Ñ–æ—Ç–æ + –≤–∏–¥–µ–æ
            with open(img_path, 'rb') as f_photo, open(video_path, 'rb') as f_video:
                media = [
                    InputMediaPhoto(f_photo, caption="–í–∞—à –±–∏–ª–µ—Ç üéüÔ∏è"),
                    InputMediaVideo(f_video),
                ]
                bot.send_media_group(message.chat.id, media)

            bot.send_message(message.chat.id, "‚úÖ –ë–∏–ª–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω! –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–∏–ª–µ—Ç–∞.")

        except Exception as e:
            # —Ñ–æ–ª–±—ç–∫: —Ö–æ—Ç—è –±—ã –∫–∞—Ä—Ç–∏–Ω–∫—É
            try:
                ticket_path = generate_ticket(
                    transport_label,
                    data['route_num'],
                    data['route'],
                    data['garage_number']
                )
                with open(ticket_path, 'rb') as f:
                    bot.send_photo(message.chat.id, f, caption="–í–∞—à –±–∏–ª–µ—Ç üéüÔ∏è (–≤–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")
            except Exception as e2:
                bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–ª–µ—Ç–∞: {e2}")

        finally:
            # –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for p in (img_path, video_path, ticket_path):
                if p:
                    try: os.remove(p)
                    except Exception: pass

            user_data.pop(uid, None)

    # 5) –ó–∞—â–∏—Ç–Ω—ã–π fallback
    else:
        bot.send_message(
            message.chat.id,
            "‚ùó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ:\n"
            "üîÑ –í–≤–µ—Å—Ç–∏ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
            "üìå –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"
        )
        user_data.pop(uid, None)


        
#–∑–∞–º–µ–Ω–∏–ª polling , –¥–µ–ª–∞—é –≤–µ–±—Ö—É–∫ 
# --- –í–µ–±—Ö—É–∫ (Flask) ---
from flask import Flask, request
from telebot.types import Update

app = Flask(__name__)

@app.route("/", methods=["GET"])
def index():
    # —á—Ç–æ–±—ã Render –Ω–µ –≤–∏–¥–µ–ª 404 –Ω–∞ –∫–æ—Ä–Ω–µ
    return "ok", 200

@app.route("/healthz", methods=["GET"])
def health():
    return "ok", 200

@app.route("/webhook", methods=["POST"])
def webhook():
    raw = request.get_data().decode("utf-8")
    print("‚¨áÔ∏è update:", raw, flush=True)   # –≤–∏–¥–Ω–æ –ª—é–±–æ–π –∞–ø–¥–µ–π—Ç
    try:
        upd = Update.de_json(raw)
        bot.process_new_updates([upd])
    except Exception as e:
        print("üî• webhook handler error:", repr(e), flush=True)
    return "OK", 200

def configure_webhook():
    # —Å—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ –∏ –ø—Ä–∏ gunicorn, –∏ –ø—Ä–∏ python
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL, allowed_updates=["message", "callback_query"])
    # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ: –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–∫–µ–Ω —Ä–∞–±–æ—á–∏–π
    try:
        me = bot.get_me()
        print(f"‚úÖ Telegram OK: @{me.username} (id {me.id})")
    except Exception as e:
        print(f"‚ùå Telegram auth failed: {e}")
        sys.exit(1)

# –≤—ã–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è (–≤–∞–∂–Ω–æ –¥–ª—è gunicorn)
configure_webhook()

if __name__ == "__main__":
    # –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ/polling-free ‚Äî –ø–æ–¥–Ω–∏–º–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä Flask
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)


















